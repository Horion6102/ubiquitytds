<?php
namespace controllers;
use Ubiquity\attributes\items\router\Route;
use Ubiquity\attributes\items\router\Get;
use Ubiquity\attributes\items\router\Post;
use Ubiquity\controllers\auth\AuthController;
use Ubiquity\controllers\auth\WithAuthTrait;
use Ubiquity\utils\http\URequest;
use Ubiquity\utils\http\USession;

 /**
  * Controller TodoController
  */
class TodoController extends \controllers\ControllerBase{
    use WithAuthTrait;

    const CACHE_KEY = 'datas/lists/';
    const EMPTY_LIST_ID='not saved';
    const LIST_SESSION_KEY='list';
    const ACTIVE_LIST_SESSION_KEY='active-list';

    #[Route('_default')]
	public function index(){
		$list=USession::get(self::LIST_SESSION_KEY,[]);
        $this->displayList($list);
	}

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadView('main/vMenu.html');
    }

    private function displayList(array $list) {
        $this->loadview('Todocontroller/displayList.html',compact("list"));
    }

    #[Post(path: "Todo/addElement",name: "todo.add")]
	public function addElement(){
		$list=USession::get(self::ACTIVE_LIST_SESSION_KEY,[]);
        $newElement=URequest::post('elm');
        $list []=$newElement;
        USession::set(self::ACTIVE_LIST_SESSION_KEY,$list);
        $this->displayList($list);
	}


	#[Get(path: "Todo/deleteElement/{index}",name: "todo.delete")]
	public function deleteElement($index){
        $list=USession::get(self::ACTIVE_LIST_SESSION_KEY,[]);
        unset($list[$index]);
        USession::set(self::ACTIVE_LIST_SESSION_KEY,$list=\array_values($list));
        $this->displayList($list);
	}


	/*#[Post(path: "Todo/editElement/{index}",name: "todo.editElement")]
	public function editElement($index){
		
	}


	#[Get(path: "Todo/loadList/{uniqid}",name: "todo.loadList")]
	public function loadList($uniqid){
		
	}


	#[Post(path: "Todo/loadListFormForm",name: "todo.loadListFormForm")]
	public function loadListFormForm(){
		
	}


	#[Get(path: "Todo/newlist/{force}",name: "todo.newlist")]
	public function newlist($force){
		
	}


	#[Route(path: "Todo/p404/{url}",name: "todo.p404")]
	public function p404($url){
		
	}


	#[Get(path: "Todo/saveList",name: "todo.saveList")]
	public function saveList(){
		
	}*/

    protected function getAuthController(): AuthController
    {
        return new Login($this);
    }

}
